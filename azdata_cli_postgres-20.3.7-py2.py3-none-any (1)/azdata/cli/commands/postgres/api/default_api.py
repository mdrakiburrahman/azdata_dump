# coding: utf-8

"""
    Microsoft SQL Server Controller Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from azdata.cli.core.clients.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def postgres_server_backup_create(self, version, resource_type, ns, server_group_id, **kwargs):  # noqa: E501
        """Takes a backup for a Dusky database resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postgres_server_backup_create(version, resource_type, ns, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resource_type: (required)
        :param str ns: (required)
        :param str server_group_id: (required)
        :param str x_request_id:
        :param str name:
        :param str incremental:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postgres_server_backup_create_with_http_info(version, resource_type, ns, server_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postgres_server_backup_create_with_http_info(version, resource_type, ns, server_group_id, **kwargs)  # noqa: E501
            return data

    def postgres_server_backup_create_with_http_info(self, version, resource_type, ns, server_group_id, **kwargs):  # noqa: E501
        """Takes a backup for a Dusky database resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postgres_server_backup_create_with_http_info(version, resource_type, ns, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resource_type: (required)
        :param str ns: (required)
        :param str server_group_id: (required)
        :param str x_request_id:
        :param str name:
        :param str incremental:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'resource_type', 'ns', 'server_group_id', 'x_request_id', 'name', 'incremental']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postgres_backup_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `postgres_backup_create`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `postgres_backup_create`")  # noqa: E501
        # verify the required parameter 'ns' is set
        if ('ns' not in params or
                params['ns'] is None):
            raise ValueError("Missing the required parameter `ns` when calling `postgres_backup_create`")  # noqa: E501
        # verify the required parameter 'server_group_id' is set
        if ('server_group_id' not in params or
                params['server_group_id'] is None):
            raise ValueError("Missing the required parameter `server_group_id` when calling `postgres_backup_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version'] # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type'] # noqa: E501
        if 'ns' in params:
            path_params['ns'] = params['ns']  # noqa: E501
        if 'server_group_id' in params:
            path_params['serverGroupId'] = params['server_group_id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'incremental' in params:
            query_params.append(('incremental', params['incremental']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v{version}/arc/{resourceType}/backups/{ns}/{serverGroupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postgres_server_backup_restore(self, version, resource_type, ns, server_group_id, **kwargs):  # noqa: E501
        """Restores a Dusky database backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postgres_server_backup_restore(version, resource_type, ns, server_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resource_type: (required)
        :param str ns: (required)
        :param str server_group_id: (required)
        :param str x_request_id:
        :param str backup_id:
        :param str source_server_group_id:
        :param str time:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postgres_server_backup_restore_with_http_info(version, resource_type, ns, server_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postgres_server_backup_restore_with_http_info(version, resource_type, ns, server_group_id, **kwargs)  # noqa: E501
            return data

    def postgres_server_backup_restore_with_http_info(self, version, resource_type, ns, server_group_id, **kwargs):  # noqa: E501
        """Restores a Dusky database backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postgres_server_backup_restore_with_http_info(version, resource_type, ns, server_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resource_type: (required)
        :param str ns: (required)
        :param str server_group_id: (required)
        :param str x_request_id:
        :param str backup_id:
        :param str source_server_group_id:
        :param str time:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'resource_type', 'ns', 'server_group_id', 'x_request_id', 'backup_id', 'source_server_group_id', 'time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postgres_backup_restore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `postgres_backup_restore`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `postgres_backup_restore`")  # noqa: E501
        # verify the required parameter 'ns' is set
        if ('ns' not in params or
                params['ns'] is None):
            raise ValueError("Missing the required parameter `ns` when calling `postgres_backup_restore`")  # noqa: E501
        # verify the required parameter 'server_group_id' is set
        if ('server_group_id' not in params or
                params['server_group_id'] is None):
            raise ValueError("Missing the required parameter `server_group_id` when calling `postgres_backup_restore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'ns' in params:
            path_params['ns'] = params['ns']  # noqa: E501
        if 'server_group_id' in params:
            path_params['serverGroupId'] = params['server_group_id']  # noqa: E501

        query_params = []
        if 'backup_id' in params:
            query_params.append(('backupId', params['backup_id']))  # noqa: E501
        if 'source_server_group_id' in params:
            query_params.append(('sourceServerGroupId', params['source_server_group_id']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v{version}/arc/{resourceType}/backups/{ns}/{serverGroupId}/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postgres_server_backup_restore_status(self, version, resource_type, ns, server_group_id, **kwargs):  # noqa: E501
        """Gets the database restore status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postgres_server_backup_restore_status(version, resource_type, ns, server_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resourceType: (required)
        :param str ns: (required)
        :param str server_group_id: (required)
        :param str x_request_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postgres_server_backup_restore_status_with_http_info(version, resource_type, ns, server_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postgres_server_backup_restore_status_with_http_info(version, resource_type, ns, server_group_id, **kwargs)  # noqa: E501
            return data

    def postgres_server_backup_restore_status_with_http_info(self, version, resource_type, ns, server_group_id, **kwargs):  # noqa: E501
        """Gets the database restore status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postgres_server_backup_restore_status_with_http_info(version, resource_type, ns, server_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resourceType: (required)
        :param str ns: (required)
        :param str server_group_id: (required)
        :param str x_request_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'resourceType', 'ns', 'server_group_id', 'x_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postgres_backup_restore_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `postgres_backup_restore_status`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `postgres_backup_restore_status`")  # noqa: E501
        # verify the required parameter 'ns' is set
        if ('ns' not in params or
                params['ns'] is None):
            raise ValueError("Missing the required parameter `ns` when calling `postgres_backup_restore_status`")  # noqa: E501
        # verify the required parameter 'server_group_id' is set
        if ('server_group_id' not in params or
                params['server_group_id'] is None):
            raise ValueError("Missing the required parameter `server_group_id` when calling `postgres_backup_restore_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'ns' in params:
            path_params['ns'] = params['ns']  # noqa: E501
        if 'server_group_id' in params:
            path_params['serverGroupId'] = params['server_group_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v{version}/arc/{resourceType}/backups/{ns}/{serverGroupId}/restore', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
    
    def postgres_server_backup_show(self, version, resource_type, ns, server_group_id, backup_id, **kwargs):  # noqa: E501
        """Gets a backup for a Dusky database resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postgres_server_backup_show(version, resource_type, ns, db_name, backup_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resource_type: (required)
        :param str ns: (required)
        :param str server_group_id: (required)
        :param str backup_id: (required)
        :param str x_request_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postgres_server_backup_show_with_http_info(version, resource_type, ns, server_group_id, backup_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postgres_server_backup_show_with_http_info(version, resource_type, ns, server_group_id, backup_id, **kwargs)  # noqa: E501
            return data

    def postgres_server_backup_show_with_http_info(self, version, resource_type, ns, server_group_id, backup_id, **kwargs):  # noqa: E501
        """Gets a backup for a Dusky database resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postgres_server_backup_show_with_http_info(version, resource_type, ns, db_name, backup_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resource_type: (required)
        :param str ns: (required)
        :param str server_group_id: (required)
        :param str backup_id: (required)
        :param str x_request_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'resource_type', 'ns', 'server_group_id', 'backup_id', 'x_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postgres_backup_show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `postgres_backup_show`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `postgres_backup_show`")  # noqa: E501
        # verify the required parameter 'ns' is set
        if ('ns' not in params or
                params['ns'] is None):
            raise ValueError("Missing the required parameter `ns` when calling `postgres_backup_show`")  # noqa: E501
        # verify the required parameter 'server_group_id' is set
        if ('server_group_id' not in params or
                params['server_group_id'] is None):
            raise ValueError("Missing the required parameter `server_group_id` when calling `postgres_backup_show`")  # noqa: E501
        # verify the required parameter 'backup_id' is set
        if ('backup_id' not in params or
                params['backup_id'] is None):
            raise ValueError("Missing the required parameter `backup_id` when calling `postgres_backup_show`")  # noqa: E501


        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'ns' in params:
            path_params['ns'] = params['ns']  # noqa: E501
        if 'server_group_id' in params:
            path_params['serverGroupId'] = params['server_group_id']  # noqa: E501
        if 'backup_id' in params:
            path_params['backupId'] = params['backup_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v{version}/arc/{resourceType}/backups/{ns}/{serverGroupId}/{backupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dusky_backups(self, version, resource_type, ns, server_group_id, **kwargs):  # noqa: E501
        """Lists Postgres database backups.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dusky_backups(version, resource_type, ns, server_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resource_type: (required)
        :param str ns: The namespace of the server. (required)
        :param str server_group_id: The Id of the server to list backups for. (required)
        :return: BackupList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_dusky_backups_with_http_info(version, resource_type, ns, server_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_dusky_backups_with_http_info(version, resource_type, ns, server_group_id, **kwargs)  # noqa: E501
            return data

    def list_dusky_backups_with_http_info(self, version, resource_type, ns, server_group_id, **kwargs):  # noqa: E501
        """Lists Postgres database backups.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dusky_backups_with_http_info(version, resource_type, ns, server_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resource_type: (required)
        :param str ns: The namespace of the server. (required)
        :param str server_group_id: The Id of the server to list backups for. (required)
        :return: BackupList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'resource_type', 'ns', 'server_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dusky_backups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `list_dusky_backups`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `list_dusky_backups`")  # noqa: E501
        # verify the required parameter 'ns' is set
        if ('ns' not in params or
                params['ns'] is None):
            raise ValueError("Missing the required parameter `ns` when calling `list_dusky_backups`")  # noqa: E501
        # verify the required parameter 'server_group_id' is set
        if ('server_group_id' not in params or
                params['server_group_id'] is None):
            raise ValueError("Missing the required parameter `server_group_id` when calling `list_dusky_backups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'ns' in params:
            path_params['ns'] = params['ns']  # noqa: E501
        if 'server_group_id' in params:
            path_params['serverGroupId'] = params['server_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v{version}/arc/{resourceType}/backups/{ns}/{serverGroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dusky_backup(self, version, resource_type, ns, server_group_id, backup_id, **kwargs):  # noqa: E501
            """Deletes Postgres database backups.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.delete_dusky_backup(version, resource_type, ns, server_group_id, backup_id, async_req=True)
            >>> result = thread.get()

            :param async_req bool
            :param str version: (required)
            :param str resource_type: (required)
            :param str ns: The namespace of the server. (required)
            :param str server_group_id: The Id of the server to delete backups from. (required)
            :param str backup_id: The Id of the backup. (required)
            :return: backup object which is deleted
                    If the method is called asynchronously,
                    returns the request thread.
            """
            kwargs['_return_http_data_only'] = True
            if kwargs.get('async_req'):
                return self.delete_dusky_backup_with_http_info(version, resource_type, ns, server_group_id, backup_id, **kwargs)  # noqa: E501
            else:
                (data) = self.delete_dusky_backup_with_http_info(version, resource_type, ns, server_group_id, backup_id, **kwargs)  # noqa: E501
                return data

    def delete_dusky_backup_with_http_info(self, version, resource_type, ns, server_group_id, backup_id, **kwargs):  # noqa: E501
        """Deletes Postgres database backups.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dusky_backup(version, resource_type, ns, server_group_id, backup_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: (required)
        :param str resource_type: (required)
        :param str ns: The namespace of the server. (required)
        :param str server_group_id: The Id of the server to delete backups from. (required)
        :param str backup_id: The Id of the backup. (required)
        :return: backup object which is deleted
                    If the method is called asynchronously,
                    returns the request thread.
        """
        all_params = ['version', 'resource_type', 'ns', 'server_group_id', 'backup_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dusky_backup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_dusky_backup`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `delete_dusky_backup`")  # noqa: E501
        # verify the required parameter 'ns' is set
        if ('ns' not in params or
                params['ns'] is None):
            raise ValueError("Missing the required parameter `ns` when calling `delete_dusky_backup`")  # noqa: E501
        # verify the required parameter 'server_group_id' is set
        if ('server_group_id' not in params or
                params['server_group_id'] is None):
            raise ValueError("Missing the required parameter `server_group_id` when calling `delete_dusky_backup`")  # noqa: E501
        # verify the required parameter 'backup_id' is set
        if ('backup_id' not in params or
                params['backup_id'] is None):
            raise ValueError("Missing the required parameter `backup_id` when calling `delete_dusky_backup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'ns' in params:
            path_params['ns'] = params['ns']  # noqa: E501
        if 'server_group_id' in params:
            path_params['serverGroupId'] = params['server_group_id']  # noqa: E501
        if 'backup_id' in params:
            path_params['backupId'] = params['backup_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v{version}/arc/{resourceType}/backups/{ns}/{serverGroupId}/{backupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)